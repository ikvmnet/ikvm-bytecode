<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
using System;

using IKVM.ByteCode.Encoding;

namespace IKVM.ByteCode.Decoding
{

    public readonly partial struct Attribute
    {

<#
foreach (var i in File.ReadAllLines(Host.ResolvePath(Path.Combine("..", "Attribute.txt"))))
{
    var name = i.Trim();
#>

        public static explicit operator <#= name #>Attribute(Attribute attribute) => attribute.As<#= name #>();

        public <#= name #>Attribute As<#= name #>()
        {
            var reader = new ClassFormatReader(Data);
            if (<#= name #>Attribute.TryRead(ref reader, out var value) == false)
                throw new InvalidClassException($"End of data reached casting Attribute to {nameof(AttributeName.<#= name #>)}.");

            return value;
        }
<#
}
#>

        readonly void EncodeSelfTo<TConstantMap>(TConstantMap map, ref AttributeTableEncoder encoder)
            where TConstantMap : IConstantHandleMap
        {
            switch (map.Get(Name).Value)
            {
<#
foreach (var i in File.ReadAllLines(Host.ResolvePath(Path.Combine("..", "Attribute.txt"))))
{
    var name = i.Trim();
#>
                case AttributeName.<#= name #>:
                    ((<#= name #>Attribute)this).EncodeTo(map, map.Map(Name), ref encoder);
                    break;
<#
}
#>
                default:
                    throw new ByteCodeException("Cannot encode unknown attribute. Attribute layout is unknown.");
            }
        }

    }

}
