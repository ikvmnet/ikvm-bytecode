<#@ template hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ import namespace="System.IO" #>
using System;

using IKVM.ByteCode.Writing;

namespace IKVM.ByteCode.Reading
{

    public readonly partial struct Attribute
    {

<#
foreach (var i in File.ReadAllLines(Host.ResolvePath(Path.Combine("..", "Attribute.txt"))))
{
    var name = i.Trim();
#>

        public static explicit operator <#= name #>Attribute(Attribute attribute) => attribute.As<#= name #>();

        public <#= name #>Attribute As<#= name #>()
        {
            var reader = new ClassFormatReader(Data);
            if (<#= name #>Attribute.TryRead(ref reader, out var value) == false)
                throw new InvalidCastException($"End of data reached casting Attribute to {nameof(AttributeName.<#= name #>)}.");

            return value;
        }
<#
}
#>

        readonly void EncodeSelfTo<TConstantView, TConstantPool>(TConstantView view, TConstantPool pool, AttributeTableBuilder builder)
            where TConstantView : class, IConstantView
            where TConstantPool : class, IConstantPool
        {
            if (view is null)
                throw new ArgumentNullException(nameof(view));
            if (pool is null)
                throw new ArgumentNullException(nameof(pool));

            switch (view.Get(Name).Value)
            {
<#
foreach (var i in File.ReadAllLines(Host.ResolvePath(Path.Combine("..", "Attribute.txt"))))
{
    var name = i.Trim();
#>
                case AttributeName.<#= name #>:
                    ((<#= name #>Attribute)this).EncodeTo(view, pool, builder);
                    break;
<#
}
#>
                default:
                    throw new ByteCodeException("Cannot encode unknown attribute. Attribute layout is unknown.");
            }
        }

    }

}
