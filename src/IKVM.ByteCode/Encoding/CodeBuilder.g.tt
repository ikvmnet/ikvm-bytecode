<#@ template debug="true" hostspecific="true" language="C#" #>
<#@ include file="..\Instruction.t4" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.CompilerServices;

namespace IKVM.ByteCode.Encoding
{

    public partial class CodeBuilder
    {

<#
foreach (var i in InstructionFile.Read(Host.ResolvePath(Path.Combine("..", "Instruction.json"))))
{
    var inst = i.Key;
    if (inst is "lookupswitch" or "tableswitch")
        continue;

    var name = i.Value.Name;
    var args = i.Value.Args ?? [];
#>
        /// <summary>
        /// Encodes the '<#= inst #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(<#= Util.BuilderArgList(args) #>)
        {
<#
    if (Util.HasBranchTarget(args))
    {
#>
            var _offset = Offset;
<#
    }
#>
<#
    if (Util.HasWide(args))
    {
#>
            var wide = false;

<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
            if (<#= arg.Name.ToLower() #> > <#= Util.GetMaxSizeExpr(arg.Type) #> || <#= arg.Name.ToLower() #> < <#= Util.GetMinSizeExpr(arg.Type) #>)
                wide = true;

<#
        }
#>
            if (wide)
            {
                this.OpCode(IKVM.ByteCode.OpCode.Wide);
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
                <#= Util.GetWriteArg(arg, true) #>;
<#
        }
#>
            }
            else
            {
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
                <#= Util.GetWriteArg(arg, false) #>;
<#
        }
#>
            }
<#
    }
    else
    {
#>
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
            <#= Util.GetWriteArg(arg, false) #>;
<#
        }
#>
<#
    }
#>

            return this;
        }

<#
}
#>

    }

}
