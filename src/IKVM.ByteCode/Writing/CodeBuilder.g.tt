<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Runtime.CompilerServices;

namespace IKVM.ByteCode.Writing
{

    public partial class CodeBuilder
    {

<#
var file = JObject.Parse(File.ReadAllText(Host.ResolvePath(Path.Combine("..", "OpCode.json"))));
foreach (var o in file)
{
    var name = (string)o.Value["name"];
    var kind = (string)o.Value["kind"];
    var wideKind = o.Value["wide"] is JObject wide ? (string)wide["kind"] : null;

    switch (kind)
    {
        case "Simple":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>()
        {
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            return this;
        }

<#
            break;
        case "Constant1":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(ConstantHandle handle)
        {
<#
            if (wideKind != null)
            {
#>
            if (handle.Slot > byte.MaxValue)
                throw new InvalidOperationException("<#= name #> does not support wide constant handles.");

            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteByte(checked((byte)handle.Slot));
            return this;
<#
            }
            else
            {
#>
            if (handle.Slot > byte.MaxValue)
                throw new InvalidOperationException("<#= name #> does not support wide constant handles.");

            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteByte(checked((byte)handle.Slot));
            return this;
<#
            }
#>
        }

<#
            break;
        case "Constant2":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(ConstantHandle handle)
        {
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteUInt16(handle.Slot);
            return this;
        }

<#
            break;
        case "Constant2_Immediate1":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(ConstantHandle handle, sbyte value)
        {
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteUInt16(handle.Slot);
            this.WriteSByte(value);
            return this;
        }

<#
            break;
        case "Local1":
            var local1Arg1Type = "byte";
            if (wideKind == "Local2")
                local1Arg1Type = "ushort";
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(<#= local1Arg1Type #> local)
        {
<#
            if (wideKind == "Local2")
            {
#>
            if (local > byte.MaxValue)
            {
                this.OpCode(IKVM.ByteCode.OpCode.Wide);
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
                this.WriteUInt16(local);
                return this;
            }
            else
            {
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
                this.WriteByte((byte)local);
                return this;
            }
<#
            }
            else
            {
#>
            if (local > local.MaxValue)
                throw new InvalidOperationException("<#= name #> does not support wide constant handles.");

            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteByte(local);
            return this;
<#
            }
#>
        }
<#
            break;
        case "Local1_ImmediateS1":
            var local1ImmediateS1Arg1Type = "byte";
            var local1ImmediateS1Arg2Type = "sbyte";
            if (wideKind == "Local2_ImmediateS2")
            {
                local1ImmediateS1Arg1Type = "ushort";
                local1ImmediateS1Arg2Type = "short";
            }
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(<#= local1ImmediateS1Arg1Type #> local, <#= local1ImmediateS1Arg2Type #> value)
        {
<#
            if (wideKind == "Local2_ImmediateS2")
            {
#>
            if (local > byte.MaxValue || value > sbyte.MaxValue)
            {
                this.OpCode(IKVM.ByteCode.OpCode.Wide);
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
                this.WriteUInt16(local);
                this.WriteInt16(value);
                return this;
            }
            else
            {
                this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
                this.WriteByte((byte)local);
                this.WriteSByte((sbyte)value);
                return this;
            }
<#
            }
            else
            {
#>
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteByte(local);
            this.WriteSByte(value);
            return this;
<#
            }
#>
        }
<#
            break;
        case "Immediate1":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(sbyte value)
        {
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteSByte(value);
            return this;
        }

<#
            break;
        case "Immediate2":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(short value)
        {
            this.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
            this.WriteInt16(value);
            return this;
        }

<#
            break;
        case "Branch2":
        case "Branch4":
#>
        /// <summary>
        /// Encodes the '<#= o.Key #>' opcode.
        /// </summary>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public CodeBuilder <#= name #>(LabelHandle target)
        {
            this.Branch(IKVM.ByteCode.OpCode.<#= name #>, target);
            return this;
        }

<#
            break;
        case "Tableswitch":
        case "Lookupswitch":
        case "Constant2_1_1":
        case "WidePrefix":
            break;
        default:
            throw new Exception(name);
    }
}
#>
    
    }

}
