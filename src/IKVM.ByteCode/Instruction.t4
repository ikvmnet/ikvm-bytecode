<#+

public class InstructionFile : Dictionary<string, Instruction>
{

    public static InstructionFile Read(string path)
    {
        return JObject.Parse(File.ReadAllText(path)).ToObject<InstructionFile>();
    }

}

public class Instruction
{

    [JsonProperty("byte")]
    public int Byte { get; set; }
    
    [JsonProperty("name")]
    public string Name { get; set; }
    
    [JsonProperty("hide")]
    public bool Hide { get; set; }
    
    [JsonProperty("flow")]
    public string Flow { get; set; }

    [JsonProperty("args")]
    public InstructionArg[] Args { get; set; }
    
}

public class InstructionArg
{
    
    [JsonProperty("name")]
    public string Name { get; set; }
    
    [JsonProperty("type")]
    public string Type { get; set; }
    
    [JsonProperty("wideType")]
    public string WideType { get; set; }
    
}

public static class Util
{

    /// <summary>
    /// Returns <c>true</c> if any of the instruction arguments is a type that has a branch target.
    /// </summary>
    public static bool HasBranchTarget(InstructionArg[] args)
    {
        return args.Any(i => i.Type == "J2" || i.Type == "J4");
    }
    
    /// <summary>
    /// Returns <c>true</c> if any of the instruction arguments has a wide version.
    /// </summary>
    public static bool HasWide(InstructionArg[] args)
    {
        return args.Any(i => i.WideType != null);
    }
    
    /// <summary>
    /// Returns a text string that represents a method call to write the given instruction argument to this builder.
    /// </summary>
    public static string GetBuilderWriteArgMethodCall(InstructionArg arg, bool wide)
    {
        var type = GetRealType(arg, wide);
        var name = GetWriterTypeName(type);
        if (type == "J2")
        {
            return $"{GetWriteMethodName(type)}(({name}){arg.Name.ToLower()}, false, _offset)";
        }
        if (type == "J4")
        {
            return $"{GetWriteMethodName(type)}(({name}){arg.Name.ToLower()}, true, _offset)";
        }

        return $"{GetWriteMethodName(type)}(({name}){arg.Name.ToLower()})";
    }
    
    /// <summary>
    /// Returns a text string that represents a method call to write the given instruction argument to this builder.
    /// </summary>
    public static string GetCopyToWriteArgMethodCall(InstructionArg arg, bool wide, string offsetArgName)
    {
        var type = GetRealType(arg, wide);
        var name = GetDecoderTypeName(type);

        if (type == "C1")
            return $"{GetCopyToMethodName(type)}(({name})constants.Map({arg.Name}))";

        if (type == "C2")
            return $"{GetCopyToMethodName(type)}(({name})constants.Map({arg.Name}))";

        if (type == "J2")
            return $"{GetCopyToMethodName(type)}(({name})({arg.Name} + {offsetArgName}))";

        if (type == "J4")
            return $"{GetCopyToMethodName(type)}(({name})({arg.Name} + {offsetArgName}))";

        return $"{GetCopyToMethodName(type)}(({name}){arg.Name})";
    }

    public static string GetUserType(InstructionArg arg)
    {
        var type = arg.Type;
        if (arg.WideType != null)
            type = arg.WideType;

        return type;
    }

    public static string GetRealType(InstructionArg arg, bool wide)
    {
        var type = arg.Type;
        if (wide && arg.WideType != null)
            type = arg.WideType;

        return type;
    }

    public static string GetDecoderTypeName(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte";
            case "U2":
                return "ushort";
            case "S1":
                return "sbyte";
            case "S2":
                return "short";
            case "C1":
                return "ConstantHandle";
            case "C2":
                return "ConstantHandle";
            case "L1":
                return "byte";
            case "L2":
                return "ushort";
            case "J2":
                return "short";
            case "J4":
                return "int";
            default:
                throw new Exception(type);
        }
    }

    public static string GetBuilderTypeName(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte";
            case "U2":
                return "ushort";
            case "S1":
                return "sbyte";
            case "S2":
                return "short";
            case "C1":
                return "ConstantHandle";
            case "C2":
                return "ConstantHandle";
            case "L1":
                return "byte";
            case "L2":
                return "ushort";
            case "J2":
                return "LabelHandle";
            case "J4":
                return "LabelHandle";
            default:
                throw new Exception(type);
        }
    }

    public static string GetWriterTypeName(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte";
            case "U2":
                return "ushort";
            case "S1":
                return "sbyte";
            case "S2":
                return "short";
            case "C1":
                return "ConstantHandle";
            case "C2":
                return "ConstantHandle";
            case "L1":
                return "byte";
            case "L2":
                return "ushort";
            case "J2":
                return "LabelHandle";
            case "J4":
                return "LabelHandle";
            default:
                throw new Exception(type);
        }
    }

    public static string GetRealTypeName(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte";
            case "U2":
                return "ushort";
            case "S1":
                return "sbyte";
            case "S2":
                return "short";
            case "C1":
                return "byte";
            case "C2":
                return "ushort";
            case "L1":
                return "byte";
            case "L2":
                return "ushort";
            case "J2":
                return "short";
            case "J4":
                return "int";
            case "TableSwitch":
                return "int";
            case "LookupSwitch":
                return "int";
            default:
                throw new Exception(type);
        }
    }

    public static string GetMinSizeExpr(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte.MinValue";
            case "S1":
                return "sbyte.MinValue";
            case "L1":
                return "byte.MinValue";
            default:
                throw new Exception(type);
        }
    }

    public static string GetMaxSizeExpr(string type)
    {
        switch (type)
        {
            case "U1":
                return "byte.MaxValue";
            case "S1":
                return "sbyte.MaxValue";
            case "C1":
                return "byte.MaxValue";
            case "L1":
                return "byte.MaxValue";
            default:
                throw new Exception(type);
        }
    }

    public static string GetWriteMethodName(string type)
    {
        switch (type)
        {
            case "U1":
                return "WriteU1";
            case "S1":
                return "WriteS1";
            case "S2":
                return "WriteS2";
            case "C1":
                return "WriteC1";
            case "C2":
                return "WriteC2";
            case "L1":
                return "WriteL1";
            case "L2":
                return "WriteL2";
            case "J2":
                return "Label";
            case "J4":
                return "Label";
            default:
                throw new Exception(type);
        }
    }

    public static string GetCopyToMethodName(string type)
    {
        switch (type)
        {
            case "U1":
                return "WriteU1";
            case "S1":
                return "WriteS1";
            case "S2":
                return "WriteS2";
            case "C1":
                return "WriteC1";
            case "C2":
                return "WriteC2";
            case "L1":
                return "WriteL1";
            case "L2":
                return "WriteL2";
            case "J2":
                return "WriteJ2";
            case "J4":
                return "WriteJ4";
            default:
                throw new Exception(type);
        }
    }

    public static string BuilderInstructionArgList(InstructionArg[] args)
    {
        var s = new List<string>();

        foreach (var arg in args)
            s.Add($"{GetBuilderTypeName(GetUserType(arg))} {arg.Name.ToLowerInvariant()}");

        return string.Join(", ", s);
    }

}

#>