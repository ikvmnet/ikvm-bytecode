<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ include file="..\Instruction.t4" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".cs" #>
using System;
using System.Buffers;
using System.Runtime.CompilerServices;

using IKVM.ByteCode.Buffers;
using IKVM.ByteCode.Encoding;

namespace IKVM.ByteCode.Decoding
{

    public readonly partial record struct Instruction
    {
    
        /// <summary>
        /// Attempts to measure the instruction at the current position.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="opcode"></param>
        /// <param name="size"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool TryMeasureInstruction(ref SequenceReader<byte> reader, OpCode opcode, int offset, ref int size)
        {
            switch (opcode)
            {
<#
foreach (var i in InstructionFile.Read(Host.ResolvePath(Path.Combine("..", "Instruction.json"))))
{
    if (i.Value.Hide)
        continue;

    var inst = i.Key;
    var name = i.Value.Name;
    var args = i.Value.Args ?? [];
#>
                case OpCode.<#= name #>:
                    return <#= name #>Instruction.TryMeasure(ref reader, offset, ref size);
<#
}
#>
                default:
                    throw new InvalidCodeException("Unsupported or unexpected instruction.");
            }
        }

<#
foreach (var i in InstructionFile.Read(Host.ResolvePath(Path.Combine("..", "Instruction.json"))))
{
    if (i.Value.Hide)
        continue;

    var inst = i.Key;
    var name = i.Value.Name;
    var args = i.Value.Args ?? [];
#>
        /// <summary>
        /// Converts the <see cref="Instruction" /> to a <see cref="<#= name #>Instruction" /> if possible.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public <#= name #>Instruction As<#= name #>()
        {
            if (OpCode != OpCode.<#= name #>)
                throw new InvalidCastException($"Cannot convert instruction of opcode '{OpCode}' to '<#= name #>'.");

            if (<#= name #>Instruction.TryRead(Data, Offset, out var instruction) == false)
                throw new InvalidCodeException("Unexpected end of data trying to read instruction.");

            return instruction;
        }

<#
}
#>
        /// <summary>
        /// Copies this instruction to the specified <see cref="CodeBuilder"/>.
        /// </summary>
        /// <typeparam name="TConstantMap"></typeparam>
        /// <param name="constants"></param>
        /// <param name="builder"></param>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal void CopyTo<TConstantMap>(TConstantMap constants, CodeBuilder builder)
            where TConstantMap : IConstantMap
        {
            switch (OpCode)
            {
<#
foreach (var i in InstructionFile.Read(Host.ResolvePath(Path.Combine("..", "Instruction.json"))))
{
    if (i.Value.Hide)
        continue;

    var inst = i.Key;
    var name = i.Value.Name;
    var args = i.Value.Args ?? [];
#>
                case OpCode.<#= name #>:
                    ((<#= name #>Instruction)this).CopyTo(constants, builder);
                    break;
<#
}
#>
                default:
                    throw new InvalidCodeException("Unsupported or unexpected instruction.");
            }
        }
    
    }

<#
foreach (var i in InstructionFile.Read(Host.ResolvePath(Path.Combine("..", "Instruction.json"))))
{
    if (i.Value.Hide)
        continue;

    var inst = i.Key;
    var name = i.Value.Name;
    var args = i.Value.Args ?? [];

    if (inst is "tableswitch" or "lookupswitch")
        continue;
#>
    /// <summary>
    /// Describes the '<#= inst #>' instruction.
    /// </summary>
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
    /// <param name="<#= arg.Name #>"></param>
<#
        }
#>
    public partial record struct <#= name #>Instruction(<#= DecoderCtorArgList(args) #>)
    {
    
        /// <summary>
        /// Converts the <see cref="Instruction" /> to a <see cref="<#= name #>Instruction" />.
        /// </summary>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static explicit operator <#= name #>Instruction(Instruction value) => value.As<#= name #>();
        
        /// <summary>
        /// Attempts to measure this instruction.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="offset"></param>
        /// <param name="size"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool TryMeasure(ref SequenceReader<byte> reader, int offset, ref int size)
        {
            if (Instruction.TryReadOpCode(ref reader, out var opcode, out var wide) == false)
                return false;

            if (opcode != OpCode.<#= name #>)
                throw new InvalidCodeException($"Unexpected opcode '{opcode:X}' at {reader.Position}.");

<#
    if (Util.HasWide(args))
    {
#>
            if (wide)
            {
                // advance by opcode and prefix
                size += 2;
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

                // arg<#= j + 1 #>: <#= arg.Name #>
                if (Instruction.TryMeasure<#= Util.GetRealType(arg, true) #>(ref reader, ref size) == false)
                    return false;
<#
        }
#>
            }
            else
            {
                // advance by opcode size
                size += 1;
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

                // arg<#= j + 1 #>: <#= arg.Name #>
                if (Instruction.TryMeasure<#= Util.GetRealType(arg, false) #>(ref reader, ref size) == false)
                    return false;
<#
        }
#>
            }
<#
    }
    else
    {
#>
            if (wide)
                throw new InvalidCodeException("OpCode does not support wide arguments.");
            
            // advance by opcode size
            size += 1;
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

            // arg<#= j + 1 #>: <#= arg.Name #>
            if (Instruction.TryMeasure<#= Util.GetRealType(arg, false) #>(ref reader, ref size) == false)
                return false;
<#
        }
#>
<#
    }
#>

            return true;
        }
        
        /// <summary>
        /// Attempts to read this instruction.
        /// </summary>
        /// <param name="data"></param>
        /// <param name="offset"></param>
        /// <param name="instruction"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public static bool TryRead(ReadOnlySequence<byte> data, int offset, out <#= name #>Instruction instruction)
        {
            var reader = new SequenceReader<byte>(data);
            return TryRead(ref reader, offset, out instruction);
        }
        
        /// <summary>
        /// Attempts to read this instruction.
        /// </summary>
        /// <param name="reader"></param>
        /// <param name="offset"></param>
        /// <param name="instruction"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        internal static bool TryRead(ref SequenceReader<byte> reader, int offset, out <#= name #>Instruction instruction)
        {
            instruction = default;

            if (Instruction.TryReadOpCode(ref reader, out var opcode, out var wide) == false)
                return false;

            if (opcode != OpCode.<#= name #>)
                throw new InvalidCodeException($"Unexpected opcode '{opcode:X}' at {reader.Position}.");

<#
    if (Util.HasWide(args))
    {
#>
            if (wide)
            {
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

                // arg<#= j + 1 #>: <#= arg.Name #>
                if (Instruction.TryRead<#= Util.GetRealType(arg, true) #>(ref reader, out var <#= arg.Name.ToLower() #>) == false)
                    return false;
<#
        }
#>

                instruction = new <#= name #>Instruction(<#= BuildNewArgList(args) #>);
            }
            else
            {
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

                // arg<#= j + 1 #>: <#= arg.Name #>
                if (Instruction.TryRead<#= Util.GetRealType(arg, false) #>(ref reader, out var <#= arg.Name.ToLower() #>) == false)
                    return false;
<#
        }
#>

                instruction = new <#= name #>Instruction(<#= BuildNewArgList(args) #>);
            }
<#
    }
    else
    {
#>
            if (wide)
                throw new InvalidCodeException("OpCode does not support wide arguments.");
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

            // arg<#= j + 1 #>: <#= arg.Name #>
            if (Instruction.TryRead<#= Util.GetRealType(arg, false) #>(ref reader, out var <#= arg.Name.ToLower() #>) == false)
                return false;
<#
        }
#>

            instruction = new <#= name #>Instruction(<#= BuildNewArgList(args) #>);
<#
    }
#>

            return true;
        }
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>

        // arg<#= j + 1 #>: <#= arg.Name #>
        public readonly <#= Util.GetDecoderTypeName(Util.GetRealType(arg, true)) #> <#= arg.Name #> = <#= arg.Name #>;
<#
        }
#>
        
        /// <summary>
        /// Copies this instruction to the specified <see cref="CodeBuilder" />.
        /// </summary>
        /// <param name="constants"></param>
        /// <param name="builder"></param>
        /// <returns></returns>
        [MethodImpl(MethodImplOptions.AggressiveInlining)]
        public void CopyTo<TConstantMap>(TConstantMap constants, CodeBuilder builder)
            where TConstantMap : IConstantMap
        {
<#
    if (Util.HasWide(args))
    {
#>
            var wide = false;

<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
            if (<#= arg.Name #> > <#= Util.GetMaxSizeExpr(arg.Type) #> || <#= arg.Name #> < <#= Util.GetMinSizeExpr(arg.Type) #>)
                wide = true;

<#
        }
#>
            if (wide)
            {
                builder.OpCode(IKVM.ByteCode.OpCode.Wide);
                builder.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
                builder.<#= Util.GetCopyToWriteArgMethodCall(arg, true) #>;
<#
        }
#>
            }
            else
            {
                builder.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
                builder.<#= Util.GetCopyToWriteArgMethodCall(arg, false) #>;
<#
        }
#>
            }
<#
    }
    else
    {
#>
            builder.OpCode(IKVM.ByteCode.OpCode.<#= name #>);
<#
        for (int j = 0; j < args.Length; j++)
        {
            var arg = args[j];
#>
            builder.<#= Util.GetCopyToWriteArgMethodCall(arg, false) #>;
<#
        }
#>
<#
    }
#>
        }

    }

<#
}
#>
}
<#+

static string GetMeasureArg(InstructionArg arg, bool wide)
{
    var type = Util.GetRealType(arg, wide);
    var name = Util.GetRealTypeName(type);
    return $"TryAdvance{type}(ref reader)";
}

static string GetReadArg(InstructionArg arg, bool wide)
{
    var type = Util.GetRealType(arg, wide);
    var name = Util.GetRealTypeName(type);
    return $"TryRead{type}(ref reader, out {name} {arg.Name.ToLower()})";
}

static string DecoderCtorArgList(InstructionArg[] args)
{
    var s = new List<string>();

    s.Add("int Offset");

    foreach (var arg in args)
        s.Add($"{Util.GetDecoderTypeName(Util.GetRealType(arg, true))} {arg.Name}");
        
    return string.Join(", ", s);
}

static string DecoderCopyToArgList(InstructionArg[] args)
{
    var s = new List<string>();

    foreach (var arg in args)
        s.Add(arg.Name);
        
    return string.Join(", ", s);
}

static string BuildNewArgList(InstructionArg[] args)
{
    var s = new List<string>();

    s.Add("offset");

    foreach (var arg in args)
        s.Add(arg.Name.ToLower());

    return string.Join(", ", s);
}

#>
